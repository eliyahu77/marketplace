kind: job
metadata:
  name: mlrun-onnx
  tag: ''
  hash: 5991963b56a2310e367cef83e2cd751fd7e47c41
  project: default
  labels:
    author: guyl
  categories:
  - Utilities
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: to_onnx
  entry_points:
    tf_keras_to_onnx:
      name: tf_keras_to_onnx
      doc: Convert a tf.keras model to an ONNX model and log it back to MLRun as a
        new model object.
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun function execution context
        default: ''
      - name: model_name
        type: str
        doc: The model's name.
        default: ''
      - name: model_path
        type: str
        doc: The model path store object.
        default: ''
      - name: onnx_model_name
        type: str
        doc: The name to use to log the converted ONNX model. If not given, the given
          `model_name` will be used with an additional suffix `_onnx`. Defaulted to
          None.
        default: null
      - name: input_signature
        type: List[Tuple[Tuple[int], str]]
        doc: 'A list of the input layers shape and data type properties. Expected
          to receive a list where each element is an input layer tuple. An input layer
          tuple is a tuple of: [0] = Layer''s shape, a tuple of integers. [1] = Layer''s
          data type, a dtype numpy string. If None, the input signature will be tried
          to be read automatically before converting to ONNX. Defaulted to None.'
        default: null
      - name: optimize_model
        type: bool
        doc: Whether or not to optimize the ONNX model using 'onnxoptimizer' before
          saving the model. Defaulted to True.
        default: true
      outputs:
      - default: ''
      lineno: 25
    to_onnx:
      name: to_onnx
      doc: Convert the given model to an ONNX model.
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun function execution context
        default: ''
      - name: model_name
        type: str
        doc: The model's name.
        default: ''
      - name: model_path
        type: str
        doc: The model path store object.
        default: ''
      - name: onnx_model_name
        type: str
        doc: The name to use to log the converted ONNX model. If not given, the given
          `model_name` will be used with an additional suffix `_onnx`. Defaulted to
          None.
        default: null
      - name: framework
        type: str
        doc: The model's framework. If None, it will be read from the 'framework'
          label of the model artifact provided. Defaulted to None.
        default: null
      - name: framework_kwargs
        type: Dict[str, Any]
        doc: 'Additional arguments each framework may require in order to convert
          to ONNX. To get the doc string of the desired framework onnx conversion
          function, pass {"help": True}.'
        default: null
      outputs:
      - default: ''
      lineno: 84
    optimize:
      name: optimize
      doc: 'Use the onnxoptimizer package to optimize the ONNX model. The optimizations
        supported can be seen by calling

        ''onnxoptimizer.get_available_passes()'''
      parameters:
      - name: context
        type: MLClientCtx
        doc: The MLRun function execution context.
        default: ''
      - name: model_name
        type: str
        doc: The model's name.
        default: ''
      - name: model_path
        type: str
        doc: Path to the ONNX model object.
        default: ''
      - name: optimizations
        type: List[str]
        doc: List of possible optimizations. If None, all of the optimizations will
          be used. Defaulted to None.
        default: null
      - name: fixed_point
        type: bool
        doc: Optimize the weights using fixed point. Defaulted to False.
        default: false
      - name: optimized_model_name
        type: str
        doc: The name of the optimized model. If None, the original model will be
          overridden. Defaulted to None.
        default: null
      outputs:
      - default: ''
      lineno: 143
  description: ONNX intigration in MLRun, converting and optimizing models from different
    framework to ONNX using MLRun.
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/guy1992l/functions.git#6cd12cd7bddfa44f1fd67bdbc0ff2bc5b512abf4:/Users/guyl/Projects/functions/mlrun_onnx/mlrun_onnx.py
    origin_filename: /Users/guyl/Projects/functions/mlrun_onnx/mlrun_onnx.py
  disable_auto_mount: false
  priority_class_name: ''
  affinity: null
verbose: false
