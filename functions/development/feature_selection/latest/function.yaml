kind: job
metadata:
  name: feature-selection
  tag: ''
  hash: cac1a28d1fbbe2a9c2c53376f909a11c79715921
  project: default
  labels:
    author: orz
  categories:
  - data-prep
  - ml
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: feature_selection/feature_selection
  description: Select features through multiple Statistical and Model filters
  build:
    functionSourceCode: 
    commands:
    - python -m pip install mlrun sklearn
    code_origin: https://github.com/Michaelliv/functions.git#b6d661b4f8ad3f3a632a5024f679a4babbb04395:/home/michaell/projects/functions/feature_selection/feature_selection.py
verbose: false
