kind: job
metadata:
  name: model-monitoring-batch
  tag: ''
  hash: d48ac2dcb277031bf921f328d56f922fe2531d2e
  project: default
  categories: []
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  env: []
  default_handler: handler
  description: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/Michaelliv/functions.git#b6d661b4f8ad3f3a632a5024f679a4babbb04395:/home/michaell/projects/functions/model_monitoring_batch/model_monitoring_batch.py
verbose: false
