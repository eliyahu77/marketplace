kind: remote
metadata:
  name: model-monitoring-stream
  tag: ''
  hash: ad4242f0317bd3093a425bbd5efd405166d2710a
  project: default
  categories: []
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  description: ''
  min_replicas: 1
  max_replicas: 4
  env: []
  base_spec: ''
  source: ''
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/Michaelliv/functions.git#b6d661b4f8ad3f3a632a5024f679a4babbb04395:/home/michaell/projects/functions/model_monitoring_stream/model_monitoring_stream.py
  default_handler: handler
verbose: false
