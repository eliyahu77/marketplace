kind: job
metadata:
  name: feature-selection
  tag: ''
  hash: 8d1f7ed24d95baa6f923dd7541fb7a6b132aa030
  project: default
  labels:
    author: orz
  categories:
  - data-preparation
  - machine-learning
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: feature_selection/feature_selection
  entry_points:
    show_values_on_bars:
      name: show_values_on_bars
      doc: ''
      parameters:
      - name: axs
        default: ''
      - name: h_v
        default: v
      - name: space
        default: 0.4
      outputs:
      - default: ''
      lineno: 24
    plot_stat:
      name: plot_stat
      doc: ''
      parameters:
      - name: context
        default: ''
      - name: stat_name
        default: ''
      - name: stat_df
        default: ''
      outputs:
      - default: ''
      lineno: 46
    feature_selection:
      name: feature_selection
      doc: 'Applies selected feature selection statistical functions

        or models on our ''df_artifact''.


        Each statistical function or model will vote for it''s best K selected features.

        If a feature has >= ''min_votes'' votes, it will be selected.'
      parameters:
      - name: context
        doc: the function context
        default: ''
      - name: df_artifact
        default: ''
      - name: k
        doc: number of top features to select from each statistical function or model
        default: 2
      - name: min_votes
        doc: minimal number of votes (from a model or by statistical function) needed
          for a feature to be selected. Can be specified by percentage of votes or
          absolute number of votes
        default: 0.5
      - name: label_column
        type: str
        doc: ground-truth (y) labels
        default: Y
      - name: stat_filters
        doc: statistical functions to apply to the features (from sklearn.feature_selection)
        default:
        - f_classif
        - mutual_info_classif
        - chi2
        - f_regression
      - name: model_filters
        doc: models to use for feature evaluation, can be specified by model name
          (ex. LinearSVC), formalized json (contains 'CLASS', 'FIT', 'META') or a
          path to such json file.
        default:
          LinearSVC: LinearSVC
          LogisticRegression: LogisticRegression
          ExtraTreesClassifier: ExtraTreesClassifier
      - name: max_scaled_scores
        doc: produce feature scores table scaled with max_scaler
        default: true
      outputs:
      - default: ''
      lineno: 70
  description: Select features through multiple Statistical and Model filters
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/daniels290813/functions.git#55a79c32be5d233cc11efcf40cd3edbe309bfdef:/home/kali/functions/feature_selection/feature_selection.py
  affinity: null
verbose: false
