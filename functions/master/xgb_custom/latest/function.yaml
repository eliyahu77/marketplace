kind: job
metadata:
  name: xgb-custom
  tag: ''
  hash: ec71e0b5e47e35e92bb4b65de76d1b4b959c1007
  project: default
  labels:
    author: Daniel
  categories:
  - model-testing
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  env: []
  default_handler: gen_outliers
  description: simulate data with outliers.
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/Michaelliv/functions.git#b6d661b4f8ad3f3a632a5024f679a4babbb04395:/home/michaell/projects/functions/xgb_custom/xgb_custom.py
verbose: false
