kind: job
metadata:
  name: describe
  tag: ''
  hash: b17830e185b9963f4ed398376039caeb26c04ecf
  project: ''
  labels:
    author: Davids
  categories:
  - data-analysis
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/davesh0812/functions.git#f73c80d01c1d3e19b3d55c7f8ced2ce252eb9ac6:/Users/davids/Projects/functions/describe/describe.py
    origin_filename: /Users/davids/Projects/functions/describe/describe.py
  entry_points:
    analyze:
      name: analyze
      doc: 'The function will output the following artifacts per

        column within the data frame (based on data types):


        histogram matrix chart

        histogram per feature chart

        violin chart

        correlation-matrix chart

        correlation-matrix csv

        imbalance pie chart

        imbalance-weights-vec csv'
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
        default: ''
      - name: name
        type: str
        doc: key of dataset to database ("dataset" for default)
        default: dataset
      - name: table
        type: Union[FeatureSet, DataItem]
        doc: MLRun input pointing to pandas dataframe (csv/parquet file path) or FeatureSet
          as param
        default: null
      - name: label_column
        type: str
        doc: ground truth column label
        default: null
      - name: plots_dest
        type: str
        doc: destination folder of summary plots (relative to artifact_path) ("plots"
          for default)
        default: plots
      - name: frac
        type: float
        doc: when the table has more than 5000 samples, the function will execute
          on random frac from the data (0.1 default)
        default: 0.1
      outputs:
      - default: ''
      lineno: 28
  description: describe and visualizes dataset stats
  default_handler: analyze
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
verbose: false
