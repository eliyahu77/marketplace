kind: job
metadata:
  name: coxph-trainer
  tag: ''
  hash: a578a6ce19aa1914cb579d72c0a4ec4623afdf0f
  project: default
  labels:
    author: yjb
    framework: survival
  categories:
  - training
  - ml
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  env: []
  default_handler: train_model
  entry_points:
    train_model:
      name: train_model
      doc: "train models to predict the timing of events\n\nAlthough identical in\
        \ structure to other training functions, this one\nrequires generating a 'Y'\
        \ that represents the age/duration/tenure of\nthe obervation, designated 'tenure'\
        \ here, and a binary labels columns that\nrepresents the event of interest,\
        \ churned/not-churned.\n\nIn addition, there is a strata_cols parameter, representing\
        \ a list of \nstratification (aka grouping) variables."
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
        default: ''
      - name: dataset
        type: DataItem
        doc: ("data") name of raw data file
        default: ''
      - name: event_column
        type: str
        doc: ground-truth (y) labels (considered as events in this model)
        default: labels
      - name: time_column
        type: str
        doc: age or tenure column
        default: tenure
      - name: encode_cols
        type: dict
        doc: dictionary of names and prefixes for columns that are to hot be encoded.
        default: {}
      - name: strata_cols
        type: list
        doc: columns used to stratify predictors
        default: []
      - name: plot_cov_groups
        type: bool
        default: false
      - name: p_value
        type: float
        doc: (0.005) max p value for coeffcients selected
        default: 0.005
      - name: sample
        type: int
        doc: Selects the first n rows, or select a sample starting from the first.
          If negative <-1, select a random sample
        default: <_ast.USub object at 0x7f4a7baa27b8>
      - name: test_size
        type: float
        doc: (0.25) test set size
        default: 0.25
      - name: valid_size
        type: float
        doc: (0.75) Once the test set has been removed the training set gets this
          proportion.
        default: 0.75
      - name: random_state
        type: int
        doc: (1) sklearn rng seed
        default: 1
      - name: models_dest
        type: str
        doc: destination subfolder for model artifacts
        default: ''
      - name: plots_dest
        type: str
        doc: destination subfolder for plot artifacts
        default: ''
      - name: file_ext
        type: str
        doc: format for test_set_key hold out data
        default: csv
      outputs:
      - default: ''
      lineno: 85
  description: cox proportional hazards, kaplan meier plots
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#8a7816038d1e23362b562eb2229032d34320ecce:/home/michaell/projects/temp/functions/coxph_trainer/coxph_trainer.ipynb
verbose: false
